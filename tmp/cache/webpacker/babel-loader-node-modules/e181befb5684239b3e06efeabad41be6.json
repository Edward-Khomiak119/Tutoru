{"ast":null,"code":"// // Create a Stripe client.\nvar stripe = Stripe('pk_test_N7MMj6kmuZBTQrIeVxA62n5700OVQg2i4u'); //\n// // Create an instance of Elements.\n// var elements = stripe.elements();\n//\n// // Custom styling can be passed to options when creating an Element.\n// // (Note that this demo uses a wider set of styles than the guide below.)\n// var style = {\n//   base: {\n//     color: '#32325d',\n//     fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n//     fontSmoothing: 'antialiased',\n//     fontSize: '16px',\n//     '::placeholder': {\n//       color: '#aab7c4'\n//     }\n//   },\n//   invalid: {\n//     color: '#fa755a',\n//     iconColor: '#fa755a'\n//   }\n// };\n//\n// // Create an instance of the card Element.\n// var card = elements.create('card', {style: style});\n//\n// // Add an instance of the card Element into the `card-element` <div>.\n// card.mount('#card-element');\n//\n// // Handle real-time validation errors from the card Element.\n// card.addEventListener('change', function(event) {\n//   var displayError = document.getElementById('card-errors');\n//   if (event.error) {\n//     displayError.textContent = event.error.message;\n//   } else {\n//     displayError.textContent = '';\n//   }\n// });\n//\n// // Handle form submission.\n// var form = document.getElementById('payment-form');\n// form.addEventListener('submit', function(event) {\n//   event.preventDefault();\n//\n//   stripe.createToken(card).then(function(result) {\n//     if (result.error) {\n//       // Inform the user if there was an error.\n//       var errorElement = document.getElementById('card-errors');\n//       errorElement.textContent = result.error.message;\n//     } else {\n//       // Send the token to your server.\n//       stripeTokenHandler(result.token);\n//     }\n//   });\n// });\n//\n// // Submit the form with the token ID.\n// function stripeTokenHandler(token) {\n//   // Insert the token ID into the form so it gets submitted to the server\n//   var form = document.getElementById('payment-form');\n//   var hiddenInput = document.createElement('input');\n//   hiddenInput.setAttribute('type', 'hidden');\n//   hiddenInput.setAttribute('name', 'stripeToken');\n//   hiddenInput.setAttribute('value', token.id);\n//   form.appendChild(hiddenInput);\n//\n//   // Submit the form\n//   form.submit();\n// }\n// Create a Stripe client.\n// Note: this merchant has been set up for demo purposes.\n// Create an instance of Elements.\n\nvar elements = stripe.elements(); // Custom styling can be passed to options when creating an Element.\n// (Note that this demo uses a wider set of styles than the guide below.)\n\nvar style = {\n  base: {\n    color: '#32325d',\n    fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif',\n    fontSmoothing: 'antialiased',\n    fontSize: '16px',\n    '::placeholder': {\n      color: '#aab7c4'\n    },\n    ':-webkit-autofill': {\n      color: '#32325d'\n    }\n  },\n  invalid: {\n    color: '#fa755a',\n    iconColor: '#fa755a',\n    ':-webkit-autofill': {\n      color: '#fa755a'\n    }\n  }\n}; // Create an instance of the iban Element.\n\nvar iban = elements.create('iban', {\n  style: style,\n  supportedCountries: ['SEPA']\n}); // Add an instance of the iban Element into the `iban-element` <div>.\n\niban.mount('#iban-element');\nvar errorMessage = document.getElementById('error-message');\nvar bankName = document.getElementById('bank-name');\niban.on('change', function (event) {\n  // Handle real-time validation errors from the iban Element.\n  if (event.error) {\n    errorMessage.textContent = event.error.message;\n    errorMessage.classList.add('visible');\n  } else {\n    errorMessage.classList.remove('visible');\n  } // Display bank name corresponding to IBAN, if available.\n\n\n  if (event.bankName) {\n    bankName.textContent = event.bankName;\n    bankName.classList.add('visible');\n  } else {\n    bankName.classList.remove('visible');\n  }\n}); // Handle form submission.\n\nvar form = document.getElementById('payment-form');\nform.addEventListener('submit', function (event) {\n  event.preventDefault();\n  showLoading();\n  var sourceData = {\n    type: 'sepa_debit',\n    currency: 'eur',\n    owner: {\n      name: document.querySelector('input[name=\"name\"]').value,\n      email: document.querySelector('input[name=\"email\"]').value\n    },\n    mandate: {\n      // Automatically send a mandate notification email to your customer\n      // once the source is charged.\n      notification_method: 'email'\n    }\n  }; // Call `stripe.createSource` with the iban Element and additional options.\n\n  stripe.createSource(iban, sourceData).then(function (result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n      errorMessage.textContent = result.error.message;\n      errorMessage.classList.add('visible');\n      stopLoading();\n    } else {\n      // Send the Source to your server to create a charge.\n      errorMessage.classList.remove('visible');\n      stripeSourceHandler(result.source);\n    }\n  });\n});","map":{"version":3,"sources":["/home/scrumfatory/school/tutoru/app/javascript/javascript/payment_sources.js"],"names":["stripe","Stripe","elements","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","iban","create","supportedCountries","mount","errorMessage","document","getElementById","bankName","on","event","error","textContent","message","classList","add","remove","form","addEventListener","preventDefault","showLoading","sourceData","type","currency","owner","name","querySelector","value","email","mandate","notification_method","createSource","then","result","stopLoading","stripeSourceHandler","source"],"mappings":"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","sourcesContent":["// // Create a Stripe client.\nvar stripe = Stripe('pk_test_N7MMj6kmuZBTQrIeVxA62n5700OVQg2i4u');\n//\n// // Create an instance of Elements.\n// var elements = stripe.elements();\n//\n// // Custom styling can be passed to options when creating an Element.\n// // (Note that this demo uses a wider set of styles than the guide below.)\n// var style = {\n//   base: {\n//     color: '#32325d',\n//     fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n//     fontSmoothing: 'antialiased',\n//     fontSize: '16px',\n//     '::placeholder': {\n//       color: '#aab7c4'\n//     }\n//   },\n//   invalid: {\n//     color: '#fa755a',\n//     iconColor: '#fa755a'\n//   }\n// };\n//\n// // Create an instance of the card Element.\n// var card = elements.create('card', {style: style});\n//\n// // Add an instance of the card Element into the `card-element` <div>.\n// card.mount('#card-element');\n//\n// // Handle real-time validation errors from the card Element.\n// card.addEventListener('change', function(event) {\n//   var displayError = document.getElementById('card-errors');\n//   if (event.error) {\n//     displayError.textContent = event.error.message;\n//   } else {\n//     displayError.textContent = '';\n//   }\n// });\n//\n// // Handle form submission.\n// var form = document.getElementById('payment-form');\n// form.addEventListener('submit', function(event) {\n//   event.preventDefault();\n//\n//   stripe.createToken(card).then(function(result) {\n//     if (result.error) {\n//       // Inform the user if there was an error.\n//       var errorElement = document.getElementById('card-errors');\n//       errorElement.textContent = result.error.message;\n//     } else {\n//       // Send the token to your server.\n//       stripeTokenHandler(result.token);\n//     }\n//   });\n// });\n//\n// // Submit the form with the token ID.\n// function stripeTokenHandler(token) {\n//   // Insert the token ID into the form so it gets submitted to the server\n//   var form = document.getElementById('payment-form');\n//   var hiddenInput = document.createElement('input');\n//   hiddenInput.setAttribute('type', 'hidden');\n//   hiddenInput.setAttribute('name', 'stripeToken');\n//   hiddenInput.setAttribute('value', token.id);\n//   form.appendChild(hiddenInput);\n//\n//   // Submit the form\n//   form.submit();\n// }\n\n\n// Create a Stripe client.\n// Note: this merchant has been set up for demo purposes.\n\n\n// Create an instance of Elements.\nvar elements = stripe.elements();\n\n// Custom styling can be passed to options when creating an Element.\n// (Note that this demo uses a wider set of styles than the guide below.)\nvar style = {\n  base: {\n    color: '#32325d',\n    fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif',\n    fontSmoothing: 'antialiased',\n    fontSize: '16px',\n    '::placeholder': {\n      color: '#aab7c4'\n    },\n    ':-webkit-autofill': {\n      color: '#32325d',\n    },\n  },\n  invalid: {\n    color: '#fa755a',\n    iconColor: '#fa755a',\n    ':-webkit-autofill': {\n      color: '#fa755a',\n    },\n  }\n};\n\n// Create an instance of the iban Element.\nvar iban = elements.create('iban', {\n  style: style,\n  supportedCountries: ['SEPA'],\n});\n\n// Add an instance of the iban Element into the `iban-element` <div>.\niban.mount('#iban-element');\n\nvar errorMessage = document.getElementById('error-message');\nvar bankName = document.getElementById('bank-name');\n\niban.on('change', function(event) {\n  // Handle real-time validation errors from the iban Element.\n  if (event.error) {\n    errorMessage.textContent = event.error.message;\n    errorMessage.classList.add('visible');\n  } else {\n    errorMessage.classList.remove('visible');\n  }\n\n  // Display bank name corresponding to IBAN, if available.\n  if (event.bankName) {\n    bankName.textContent = event.bankName;\n    bankName.classList.add('visible');\n  } else {\n    bankName.classList.remove('visible');\n  }\n});\n\n// Handle form submission.\nvar form = document.getElementById('payment-form');\nform.addEventListener('submit', function(event) {\n  event.preventDefault();\n  showLoading();\n\n  var sourceData = {\n    type: 'sepa_debit',\n    currency: 'eur',\n    owner: {\n      name: document.querySelector('input[name=\"name\"]').value,\n      email: document.querySelector('input[name=\"email\"]').value,\n    },\n    mandate: {\n      // Automatically send a mandate notification email to your customer\n      // once the source is charged.\n      notification_method: 'email',\n    }\n  };\n\n  // Call `stripe.createSource` with the iban Element and additional options.\n  stripe.createSource(iban, sourceData).then(function(result) {\n    if (result.error) {\n      // Inform the customer that there was an error.\n      errorMessage.textContent = result.error.message;\n      errorMessage.classList.add('visible');\n      stopLoading();\n    } else {\n      // Send the Source to your server to create a charge.\n      errorMessage.classList.remove('visible');\n      stripeSourceHandler(result.source);\n    }\n  });\n});\n"]},"metadata":{},"sourceType":"module"}